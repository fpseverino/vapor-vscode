{
    "Variable Tag": {
        "prefix": "#tag",
        "description": "Embed a value into the template",
        "body": [
            "#($1)"
        ]
    },
    "Extend template": {
        "prefix": "#extend",
        "description": "Copy the contents of one template into another",
        "body": [
            "#extend(\"${1:template}\")"
        ]
    },
    "Export and Extend": {
        "prefix": "#extend-export",
        "description": "Construct a child template, then extends the parent template",
        "body": [
            "#extend(\"${1:template}\"):",
            "\t#export(\"${2:body}\"):",
            "\t\t$0",
            "\t#endexport",
            "#endextend"
        ]
    },
    "Import content": {
        "prefix": "#import",
        "description": "Fetch the content passed to an #extend tag",
        "body": [
            "#import(\"${1:body}\")"
        ]
    },
    "for-in loop": {
        "prefix": "#for",
        "description": "Iterate over an array of items",
        "body": [
            "#for(${1:element} in ${2:array}):",
            "\t$0",
            "#endfor"
        ]
    },
    "if condition": {
        "prefix": "#if",
        "description": "Evaluate a condition",
        "body": [
            "#if(${1:bool}):",
            "\t$0",
            "#endif"
        ]
    },
    "if-else condition": {
        "prefix": "#if-else",
        "description": "Evaluate a condition with an `else` block",
        "body": [
            "#if(${1:bool}):",
            "\t$2",
            "#else:",
            "\t$3",
            "#endif"
        ]
    },
    "if-elseif condition": {
        "prefix": "#if-elseif",
        "description": "Evaluate a condition with an `else if` block",
        "body": [
            "#if(${1:bool}):",
            "\t$2",
            "#elseif(${3:bool}):",
            "\t$4",
            "#endif"
        ]
    },
    "comment": {
        "prefix": "#comment",
        "description": "Block comment",
        "body": [
            "#comment:",
            "\t$0",
            "#endcomment"
        ]
    },
    "count": {
        "prefix": "#count",
        "description": "Return the number of items in an array",
        "body": [
            "#count(${1:array})"
        ]
    },
    "lowercased": {
        "prefix": "#lowercased",
        "description": "Lowercase all letters in a string",
        "body": [
            "#lowercased(${1:string})"
        ]
    },
    "uppercased": {
        "prefix": "#uppercased",
        "description": "Uppercase all letters in a string",
        "body": [
            "#uppercased(${1:string})"
        ]
    },
    "capitalized": {
        "prefix": "#capitalized",
        "description": "Uppercase the first letter in each word of a string and lowercase the others",
        "body": [
            "#capitalized(${1:string})"
        ]
    },
    "contains": {
        "prefix": "#contains",
        "description": "Accept an array and a value as its two parameters, and return true if the array in parameter one contains the value in parameter two",
        "body": [
            "#if(contains(${1:array}, ${2:value})):",
            "\t$0",
            "#endif"
        ]
    },
    "date": {
        "prefix": "#date",
        "description": "Format dates into a readable string",
        "body": [
            "#date(${1:date})"
        ]
    },
    "date-format": {
        "prefix": "#date-format",
        "description": "Format dates into a readable string with a custom date formatter",
        "body": [
            "#date(${1:date}, \"${2:format}\")"
        ]
    },
    "date-timezone": {
        "prefix": "#date-timezone",
        "description": "Format dates into a readable string with a custom date formatter and a custom timezone",
        "body": [
            "#date(${1:date}, \"${2:format}\", \"${3:timeZoneID}\")"
        ]
    },
    "unsafeHTML": {
        "prefix": "#unsafeHTML",
        "description": "Embed a value into the template without escaping any HTML in it",
        "body": [
            "#unsafeHTML(${1:variable})"
        ]
    },
    "dumpContext": {
        "prefix": "#dumpContext",
        "description": "Render the whole context to a human readable string",
        "body": [
            "#dumpContext"
        ]
    },
}